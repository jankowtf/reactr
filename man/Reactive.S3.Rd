% Generated by roxygen2 (4.0.2): do not edit by hand
\name{Reactive.S3}
\alias{Reactive.S3}
\title{Class: Reactive.S3}
\usage{
Reactive.S3(.x, id = character(), uid = character(), value = character(),
  where = parent.frame(), hash = getHashRegistry(),
  references = new.env(parent = emptyenv()), condition = NULL)
}
\arguments{
\item{.x}{\code{\link{ANY}}. An object of an arbitrary class whose class
   attribute should be updated so that it becomes an instance of class
   \code{Reactive.S3}. Mainly intended for rapid prototyping
   purposes}
}
\value{
Instance of class \code{Reactive.S3}.
}
\description{
Class representing the system state (S3) and its constructor function.
}
\section{Fields}{

\describe{
\item{\code{id}}{\code{\link{character}}.
Object ID.
Initial: \code{character()}.}

\item{\code{uid}}{\code{\link{character}}.
Object ID.
Initial: \code{character()}. Automatically computed once \code{id} is
specified: \code{
  eval(substitute(
    digest::digest(list(id = ID, where = WHERE)),
    list(ID = id, WHERE = where))
  )
}.}

\item{\code{value}}{\code{\link{ANY}}.
Actual value.
Initial: \code{NULL}.}

\item{\code{where}}{\code{\link{environment}}.
Environment of reactive object.
Initial: \code{parent.frame()}.}

\item{\code{hash}}{\code{\link{environment}}.
Environment for hash value storage.
Initial: \code{getHashRegistry()}.}

\item{\code{references}}{\code{\link{environment}}.
Environment storing information of referenced objects.
Initial: \code{new.env(parent = emptyenv())}.}

\item{\code{condition}}{\code{\link{condition}} (at least by inheritance).
If a condition has been signaled, this field is assigned a respectiv
condition object that is triggered when \code{.self$value} is requested.
See \code{\link[base]{signalCondition}} and
\code{\link[conditionr]{signalCondition}}
Initial: \code{NULL}.}
}}
\section{Intended use of this class}{


This S3 class, or to be more precise its constructor function, exists mainly
for rapid prototyping purposes.
This is mainly reflected in the fact, that when specifying \code{.x}, this
constructor function will simply update the \code{class} attribute of
whatever object has been provided.

However, it also allows for a more formal OOP-style of rapid
prototyping by offering explicit \emph{class fields} (all arguments except
\code{.x}). Nevertheless, it is probably advisable to switch to an
explicit formal approach such as \emph{S4} and/or \emph{Reference Classes}
once the package or application has reached a certain state of maturity.
}
\examples{
\dontrun{

## Informal use (intended mainly for rapid prototyping) //
## Takes *any* object and simply changes the class attributes
Reactive.S3(
  list(
    id = "x_1",
    value = 10
  )
)  
Reactive.S3(TRUE)  

## Formal use (explicitly using 'fields') //
res <- Reactive.S3()
ls(res)
res <- Reactive.S3(
  id = "x_1",
  value = 10
)
res$id
res$uid
## --> automatically computed; important for handling of hash values

## Recommended: include namespace //
## Regardless if you plan on using this class in an informal or formal way
reactr::Reactive.S3(
  id = "x_1",
  value = 10
)

}
}
\author{
Janko Thyson \email{janko.thyson@rappster.de}
}
\references{
\url{http://github.com/Rappster/reactr}
}
\seealso{
\code{
  	\link[reactr]{setReactiveS3}
}
}

