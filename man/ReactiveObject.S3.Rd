% Generated by roxygen2 (4.0.2): do not edit by hand
\name{ReactiveObject.S3}
\alias{ReactiveObject.S3}
\title{Class: ReactiveObject.S3}
\usage{
ReactiveObject.S3(.x, id = character(), uid = character(), value = NULL,
  where = parent.frame(), has_cached = FALSE, hash = getRegistry(),
  references = new.env(parent = emptyenv()), .references = character(),
  condition = NULL, checksum = character(), checksums_ref = new.env(parent
  = emptyenv()), func = NULL, invalid = FALSE)
}
\arguments{
\item{.x}{\code{\link{ANY}}. An object of an arbitrary class whose class
   attribute should be updated so that it becomes an instance of class
   \code{ReactiveObject.S3}. Mainly intended for rapid prototyping
   purposes}
}
\value{
Instance of class \code{ReactiveObject.S3}.
}
\description{
Class representing the system state (S3) and its constructor function.
}
\section{Fields}{

\describe{
\item{\code{id}}{\code{\link{character}}.
Object ID.
Initial: \code{character()}.}

\item{\code{uid}}{\code{\link{character}}.
Object ID.
Initial: \code{character()}. Automatically computed once \code{id} is
specified: \code{
  eval(substitute(
    digest::digest(list(id = ID, where = WHERE)),
    list(ID = id, WHERE = where))
  )
}.}

\item{\code{value}}{\code{\link{ANY}}.
Actual value.
Initial: \code{NULL}.}

\item{\code{where}}{\code{\link{environment}}.
Environment of reactive object.
Initial: \code{parent.frame()}.}

\item{\code{hash}}{\code{\link{environment}}.
Environment for hash value storage.
Initial: \code{getRegistry()}.}

\item{\code{references}}{\code{\link{environment}}.
Environment storing information of referenced objects.
Initial: \code{new.env(parent = emptyenv())}.}

\item{\code{condition}}{\code{\link{condition}} (at least by inheritance).
If a condition has been signaled, this field is assigned a respectiv
condition object that is triggered when \code{.self$value} is requested.
See \code{\link[base]{signalCondition}} and
\code{\link[conditionr]{signalCondition}}
Initial: \code{NULL}.}

\item{\code{checksum}}{\code{\link{character}}.
Object value checksum.
Initial: \code{character()}.}

\item{\code{checksums_ref}}{\code{\link{environment}}.
Environment for checksums of referenced objects.
Initial: \code{new.env(parent = emptyenv())}.}

\item{\code{func}}{\code{\link{function}}.
Binding function.
Initial: \code{NULL}.}

\item{\code{invalid}}{\code{\link{logical}}.
Field for propagating the invalidity of referenced objects to its
dependees. It is set to \code{TRUE} when an reactive object is unset or
removed.
Initial: \code{FALSE}.}
}}
\section{Intended use of this class}{


This S3 class, or to be more precise its constructor function, exists mainly
for rapid prototyping purposes.
This is mainly reflected in the fact, that when specifying \code{.x}, this
constructor function will simply update the \code{class} attribute of
whatever object has been provided.

However, it also allows for a more formal OOP-style of rapid
prototyping by offering explicit \emph{class fields} (all arguments except
\code{.x}). Nevertheless, it is probably advisable to switch to an
explicit formal approach such as \emph{S4} and/or \emph{Reference Classes}
once the package or application has reached a certain state of maturity.
}
\examples{
\dontrun{

## Informal use (intended mainly for rapid prototyping) //
## Takes *any* object and simply changes the class attributes
ReactiveObject.S3(
  list(
    id = "x_1",
    value = 10
  )
)  
ReactiveObject.S3(TRUE)  

## Formal use (explicitly using 'fields') //
res <- ReactiveObject.S3()
ls(res)
res <- ReactiveObject.S3(
  id = "x_1",
  value = 10
)
res$id
res$uid
## --> automatically computed; important for handling of hash values

## Recommended: include namespace //
## Regardless if you plan on using this class in an informal or formal way
reactr::ReactiveObject.S3(
  id = "x_1",
  value = 10
)

##------------------------------------------------------------------------------
## Methods //
##------------------------------------------------------------------------------

setReactiveS3(id = "x_1", value = 10)
obj <- reactr::ReactiveObject.S3(
  id = "x_1",
  value = 10
)

## Compute checksum //
digest::digest(x_1)
obj$checksum
obj$value <- x_1 <- 100
digest::digest(x_1)
obj$computeChecksum()

## Compute UID //
x_1_uid <- getObjectUid(id = "x_1")
obj$uid
obj$computeUid()
## --> automatically executed in constructor based on 'obj$id' and 'obj$where'

## Copy //
obj$copy(id = "x_1_copied")
x_1_copied
x_1 <- 100
x_1
x_1_copied
## --> independent
getFromRegistry("x_1")
getFromRegistry("x_1_copied")
## --> independent

## Has references //
obj$hasReferences()

## Register and unregister //
obj$register()
exists(obj$uid, getRegistry())
## --> already registered through call to 'setReactiveS3()'
obj$unregister()
exists(obj$uid, getRegistry())
obj$register()
exists(obj$uid, getRegistry())

## Remove //
## Remove visible object from registry and itself
obj$remove()
try(x_1)
## --> removed 

}
}
\author{
Janko Thyson \email{janko.thyson@rappster.de}
}
\references{
\url{http://github.com/Rappster/reactr}
}
\seealso{
\code{
  	\link[reactr]{setReactiveS3}
}
}

