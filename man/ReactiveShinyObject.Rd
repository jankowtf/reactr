% Generated by roxygen2 (4.0.2): do not edit by hand
\docType{data}
\name{ReactiveShinyObject}
\alias{ReactiveShinyObject}
\title{Class: ReactiveShinyObject}
\format{\preformatted{Class 'R6ClassGenerator' <environment: 0x000000000870dd58> 
 - attr(*, "name")= chr "ReactiveShinyObject_generator"
}}
\usage{
ReactiveShinyObject
}
\description{
Class that implements major parts of the reactivity mechanism of this
package.
}
\details{
Extends class \code{shiny::Observable}, or, to be more precise its
clone \code{\link[reactr]{ReactrObservable}}.
}
\section{Fields}{

\describe{
\item{\code{.cache}}{\code{\link{logical}}.
\code{TRUE}: use caching mechanism and everything associated with it;
\code{FALSE}: no caching.
Initial: \code{TRUE}.}

\item{\code{.caller}}{\code{\link{environment}}.
Referenced environment corresponding to instance of
\code{\link[reactr]{SetShinyReactive}} that calls a reference (which can
also be the object itself).
Very important in order to fine tune update processes for bi-directional
bindings.
Default: \code{self} (after initialization).}

\item{\code{.checksum}}{\code{\link{character}}.
Checksum of visible object value.
Initial: \code{character()}.}

\item{\code{.class}}{\code{\link{character}}.
Class of visible object value (\code{.value}).
If strongly typed (argument \code{typed = TRUE} in
\code{\link[reactr]{setShinyReactive}}, then this field is used
to determine if an assignment value is valid or not.
Initial: \code{character()}.}

\item{\code{condition}}{\code{\link{condition}} (at least by inheritance).
If a condition has been signaled, this field is assigned a respective
custom condition object that is triggered when the visible object value
(or \code{self$.value}) is requested.
Also see \code{\link[base]{signalCondition}} and
\code{\link[conditionr]{signalCondition}}
Initial: \code{NULL}.}

\item{\code{.id}}{\code{\link{character}}.
Object ID.
Initial: \code{character()}.}

\item{\code{.refs_checksum}}{\code{\link{environment}}.
Environment for storing the cached checksums of pull references.
Initial: \code{new.env(parent = emptyenv())}.}

\item{\code{.refs_pull}}{\code{\link{environment}}.
Environment for storing information of inbound/pull references.
Initial: \code{new.env(parent = emptyenv())}.}

\item{\code{.refs_push}}{\code{\link{environment}}.
Environment for storing information of outbound/push references.
Initial: \code{new.env(parent = emptyenv())}.}

\item{\code{.registry}}{\code{\link{environment}}.
Reference to the registry environment
(see \code{\link[reactr]{getRegistry}}.
Important for retrieving and comparing checksum values, enabling push
and other useful things (integrity checks etc.)
Initial: \code{getRegistry()}.}

\item{\code{.uid}}{\code{\link{character}}.
Object ID.
Initial: \code{character()}.
Automatically computed once \code{.id} is
specified:
\code{digest::digest(list(id = .id, where = capture.output(eval(.where))))}.}

\item{\code{.where}}{\code{\link{environment}}.
Environment of reactive object.
Initial: \code{parent.frame()}.}

\item{\code{.exists_visible}}{\code{\link{logical}}.
Field for tracking if the visible object value actually exists already
or if this is a mere "empty container" in the registry.
It is set to \code{TRUE} when the visible object is actually set/created
via \code{\link[reactr]{setShinyReactive}}.
Initial: \code{FALSE}.}

\item{\code{.has_bidir}}{\code{\link{logical}}.
Field for signaling that an instance has bi-directional references to
other objects. \strong{Very} important in order to carry out updates for
bi-directional bindings correctly.
A system-wide check for the existence of bi-directional references is
run via \code{$.hasBidirectional} inside
\code{\link[reactr]{setShinyReactive}}. The field is set to \code{TRUE}
if there are any, else it remains \code{FALSE}.
Initial: \code{FALSE}.}

\item{\code{.has_cached}}{\code{\link{logical}}.
Field for tracking if the instance already has a cached value or not.
If \code{FALSE}, the binding function (if there is any) is executed and
after that the field is set to \code{TRUE} to signal that a cached value
exists.
Initial: \code{FALSE}.}

\item{\code{.has_pull_refs}}{\code{\link{logical}}.
\code{TRUE}: instance has inbound/pull references;
\code{FALSE}: instance has no inbound/pull references
Initial: \code{FALSE}.}

\item{\code{.has_push_refs}}{\code{\link{logical}}.
\code{TRUE}: instance has outbound/push references;
\code{FALSE}: instance has no outbound/push references
Initial: \code{FALSE}.}

\item{\code{.has_pushed}}{\code{\link{logical}}.
\code{TRUE}: change has been pushed to all push references;
\code{FALSE}: change has not been pushed to push references yet.
Initial: \code{FALSE}.}

\item{\code{.is_modcycle_complete}}{\code{\link{logical}}.
\code{TRUE}: modification cycle complete;
\code{FALSE}: modification cycle not complete yet.
Only relevant for bi-directional bindings and in case of explicitly
changing visible object values via \code{\link[base]{<-}} or
\code{\link[base]{assign}}. Very important to determine the scope of
object updates.
Initial: \code{TRUE}.}

\item{\code{.is_invalid}}{\code{\link{logical}}.
Field for propagating the invalidity of referenced objects to its
referencees. It is set to \code{TRUE} when an reactive object is unset or
removed.
Initial: \code{FALSE}.}

\item{\code{.is_running_push}}{\code{\link{logical}}.
\code{TRUE}: push process is currently running;
\code{FALSE}: no push process is currently running.
Initial: \code{FALSE}.}

\item{\code{.must_push}}{\code{\link{logical}}.
Field that controls if push is enabled.
\code{TRUE}: push changes to outbound/push references;
\code{FALSE}: changes need to be \emph{pulled} by objects referencing this
instance, no push.
Initial: \code{FALSE}.}

\item{\code{.needs_update}}{\code{\link{logical}}.
Field that controls if update is to be carried out.
\code{TRUE}: update;
\code{FALSE}: no update, use cached value
Initial: \code{TRUE} (in order to trigger initialization).}
}}
\examples{
\dontrun{

## TODO: add example

}
}
\author{
Janko Thyson \email{janko.thyson@rappster.de}
}
\references{
\url{http://github.com/Rappster/reactr}
}
\seealso{
\code{
    \link[reactr]{ReactiveShinyObject},
    \link[reactr]{setShinyReactive},
    \link[shiny]{reactive},
    \link[shiny]{makeReactiveBinding},
    \link[reactr]{setReactive}
}
}
\keyword{datasets}

