% Generated by roxygen2 (4.0.2): do not edit by hand
\name{copyReactive}
\alias{copyReactive}
\title{Copy Reactive Object (generic)}
\usage{
copyReactive(id_from, where_from = parent.frame(), id_to,
  where_to = parent.frame(), ...)
}
\arguments{
\item{id_from}{\strong{Signature argument}.
Object containing name/ID information of object to copy.}

\item{where_from}{\strong{Signature argument}.
Object containing location information of object \code{id_from}.}

\item{id_to}{\strong{Signature argument}.
Object containing name/ID information of object to assign the copy to.}

\item{where_to}{\strong{Signature argument}.
Object containing location information of object that the copy is
assigned to.}

\item{...}{Further arguments to be passed to subsequent functions/methods.}
}
\description{
Copies essential information of a reactive object to a new object.
}
\details{
Takes the essential information of a reactive object (fields \code{value},
\code{refs_pull}, \code{refs_push} and \code{funct} of the invisible instance
of class \code{\link[reactr]{ReactiveObject.S3}} and creates a new reactive
object of name \code{id} in \code{where} with that information.
The important thing to note is that the two objects (and their invisible objects)
are not connected via any environments (pass-by-reference) as would be the
case if the copy was carried out by a mere call to \code{\link[base]{<-}}.
}
\examples{
\dontrun{

##------------------------------------------------------------------------------
## setReactiveS3 --> ReactiveObject.S3 //
##------------------------------------------------------------------------------

setReactiveS3(id = "x_1", value = 10)
copyReactive(id_from = "x_1", id_to = "x_1_c")
x_1_c == x_1

x_1 <- 20
x_1_c
## --> x_1_c is not affected by the change in `x_1` as the two underlying 
## invisible objects are independent from each other:
identical(getFromRegistry("x_1"), getFromRegistry("x_1_c"))

## Classes //
class(getFromRegistry("x_1"))
class(getFromRegistry("x_1_c"))


##------------------------------------------------------------------------------
## setShinyReactive --> ReactiveShinyObject //
##------------------------------------------------------------------------------

setShinyReactive(id = "x_1", value = 10)
copyReactive(id_from = "x_1", id_to = "x_1_c")
x_1_c == x_1

x_1 <- 20
x_1_c
## --> x_1_c is not affected by the change in `x_1` as the two underlying 
## invisible objects are independent from each other:
identical(getFromRegistry("x_1"), getFromRegistry("x_1_c"))

## Classes //
class(getFromRegistry("x_1"))
class(getFromRegistry("x_1_c"))

}
}
\author{
Janko Thyson \email{janko.thyson@rappster.de}
}
\references{
\url{http://github.com/Rappster/reactr}
}
\seealso{
\code{
  	\link[reactr]{copyReactive-character-character-environment-environment-method}
}
}

