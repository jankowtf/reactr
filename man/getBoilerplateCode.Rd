% Generated by roxygen2 (4.0.1): do not edit by hand
\name{getBoilerplateCode}
\alias{getBoilerplateCode}
\title{Get Boilerplate of Binding Contract}
\usage{
getBoilerplateCode(ns, ...)
}
\arguments{
\item{ns}{\strong{Signature argument}.
Object containing boilerplate namespace information.
This usually corresponds to an instance of a class used for
distinguishing boilerplate code. See \code{\link[classr]{asClassInstance}}}

\item{...}{Further arguments to be passed to subsequent functions/methods.}
}
\description{
Get boilerplate code for binding contract.
}
\examples{
\dontrun{

##------------------------------------------------------------------------------
## Important remarks //
##------------------------------------------------------------------------------
## This is a function that is currently only used inside a call to 'setReactive()'
## or 'setThis_bare()'.
## Thus, in order to see what's going on here, we first need to mimick the 
## expected system state.
  
## Mimick expected system state //  
where <- new.env()

## Ensuring that 'test' exists:
setReactive(id = "test", value = Sys.time(), where = where)

## Getting boilerplate code for binding contract:
binding <- getBoilerplateCode(
  ns = classr::createInstance(cl = "Reactr.BindingContractMonitoring.S3")
)

## We'd like to set a variable that monitors the variable 'test':
watch <- "test"

## We don't have to explicitly worry about variable that is monitoring 'test'
## except with respect to defining the binding relationship which I 
## call "binding contract".
## It defines the value of the variable monitoring 'test' based on the 
## value of 'test' via a function.
## This is the value of 'binding' when you call 'setReactive()'.
.binding <- function(x) {
  ## Add 24 hours //
  x + 60*60*24
}

## Evaluate binding contract //
## Note that it takes the value of 'where$test' and processes it 
## according to the binding relationship defined in '.binding()'
eval(binding)()

## Change monitored variable value //
where$test <- Sys.time()
where$test

## Re-evaluate binding contract //
eval(binding)()  

## All available boilerplate code of this package //
getBoilerplateCode(
  ns = classr::createInstance(cl = "Reactr.BindingContractMonitored.S3")
)
getBoilerplateCode(
  ns = classr::createInstance(cl = "Reactr.BindingContractMonitoring.S3")
)
getBoilerplateCode(
  ns = classr::createInstance(cl = "Reactr.BindingContractMutual.S3")
)

}
}
\author{
Janko Thyson \email{janko.thyson@rappster.de}
}
\references{
\url{http://github.com/Rappster/reactr}
}
\seealso{
\code{
  	\link[reactr]{getBoilerplateCode-missing-method}
}
}

