% Generated by roxygen2 (4.0.2): do not edit by hand
\name{prepareReactiveInstance}
\alias{prepareReactiveInstance}
\title{Prepare Reactive Instance (generic)}
\usage{
prepareReactiveInstance(input = NULL, id = character(), value = NULL,
  where = parent.frame(), references = character(), ...)
}
\arguments{
\item{input}{\strong{Signature argument}.
Object containing a suitable object for preparation.
Typically, this corresponds to the instance of class
\code{\link[reactr]{Reactive.S3}}.}

\item{...}{Further arguments to be passed to subsequent functions/methods.}

\item{input}{\code{\link{character}}.
UIDs of references if there exist any.}
}
\description{
Prepares a suitable instance of a class governing the establishment of
reactive behavior for the use inside \code{\link[reactr]{setReactiveS3}}.
}
\details{
Currently, this means that an instance of class
\code{\link[reactr]{Reactive.S3}} taken and certain objects/variables/values
are transferred to the respective class fields. Furthermore, the function
makes sure that all associated/necessary elements in the hash registry
exist (see \code{\link[reactr]{getHashRegistry()}}).
}
\examples{
\dontrun{

## Start with a fresh hash registry state //
resetHashRegistry()

## Example instance //
input <- reactr::Reactive.S3()

where <- new.env()
input <- prepareReactiveInstance(
  input = input, 
  id = "x_1",
  value = "hello world!",
  where = where
)
identical(input$uid, getReactiveUid("x_1", where))
identical(input$value, "hello world!")
identical(input$where, where)

## In hash registry //
hash <- getHashRegistry() 
exists(input$uid, hash, inherits = FALSE)
identical(hash[[input$uid]]$uid, input$uid)
identical(hash[[input$uid]]$where, input$where)

}
}
\author{
Janko Thyson \email{janko.thyson@rappster.de}
}
\references{
\url{http://github.com/Rappster/reactr}
}
\seealso{
\code{
    \link[reactr]{prepareReactiveInstance-Reactive.S3-method},
    \link[reactr]{Reactive.S3},
    \link[reactr]{setReactiveS3}
}
}

