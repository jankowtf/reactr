% Generated by roxygen2 (4.0.2): do not edit by hand
\docType{methods}
\name{removeFromHashRegistry,character,environment-method}
\alias{removeFromHashRegistry,character,environment-method}
\title{Remove From Hash Registry (char-env-method)}
\usage{
\S4method{removeFromHashRegistry}{character,environment}(id, where, ...)
}
\arguments{
\item{id}{\code{\link{character}}.}

\item{where}{\code{\link{environment}}.}

\item{...}{Further arguments to be passed to subsequent functions/methods.}
}
\value{
\code{\link{logical}}. \code{TRUE}: successfully removed;
   \code{FALSE}: not removed because there was nothing to remove.
}
\description{
See generic: \code{\link[reactr]{removeFromHashRegistry}}
}
\examples{
\dontrun{

## NOTE //
## This function should typically only be called inside 'unsetReactive()'
## as it manages the internal hash registry!

## Start with a clean hash registry //
resetHashRegistry()

where <- new.env()
setReactiveS3(id = id, value = 10, where = where)
setReactiveS3(id = id_2, 
  value = function() .ref_1 <- get("x_1", envir = where),
  where = where
)

## Insepct hash registry before removal //
ls(getHashRegistry())

removeFromHashRegistry(id = "x_1", where = where)
ls(getHashRegistry())
removeFromHashRegistry(id = "x_2", where = where)
ls(getHashRegistry())

## Sanity of actual cached values is not affected by this //
where$x_1
where$x_2

}
}
\author{
Janko Thyson \email{janko.thyson@rappster.de}
}
\references{
\url{http://github.com/Rappster/reactr}
}
\seealso{
\code{
   \link[reactr]{removeFromHashRegistry}
}
}

