% Generated by roxygen2 (4.0.1): do not edit by hand
\name{removeFromHashRegistry}
\alias{removeFromHashRegistry}
\title{Remove From Hash Registry}
\usage{
removeFromHashRegistry(id, watch = character(), where, .hash_id = "._HASH",
  ...)
}
\arguments{
\item{id}{\strong{Signature argument}.
Object containing id information.}

\item{where}{\strong{Signature argument}.
Object containing location information.}

\item{.hash_id}{\code{\link{character}}.
Name of the auxiliary environment for caching hash values.
Default: \code{"._HASH"}. Keep it unless this name is already taken in
either \code{where} or \code{where_watch}.}

\item{...}{Further arguments to be passed to subsequent functions/methods.}
}
\description{
Removes entry of associated reactive object that has been unset via
\code{\link[reactr]{unsetReactive}} from hash registry \code{<where>[[.hash_id]]}.
}
\examples{
\dontrun{

## NOTE //
## This function should typically only be called inside 'unsetReactive()'
## as it manages the internal hash registry!

where <- new.env()
setReactive(id = "x_1", value = 10, where = where)
setReactive(id = "x_2", watch = "x_1", where = where)

## Insepct hash registry before removal //
ls(where[[.hash_id]])

removeFromHashRegistry(id = "x_1", where = where)
removeFromHashRegistry(id = "x_1", where = where)

## Insepct hash registry before removal //
ls(where$._HASH)

## Sanity of actual values is not affected by this //
where$x_1
where$x_2


}
}
\author{
Janko Thyson \email{janko.thyson@rappster.de}
}
\references{
\url{http://github.com/Rappster/reactr}
}
\seealso{
\code{
  	\link[reactr]{removeFromHashRegistry-character-environment-method}
}
}

