% Generated by roxygen2 (4.0.2): do not edit by hand
\docType{methods}
\name{removeFromRegistry,character,environment-method}
\alias{removeFromRegistry,character,environment-method}
\alias{removeFromRegistry-character-environment-method}
\title{Remove From Registry (character-environment)}
\usage{
\S4method{removeFromRegistry}{character,environment}(id,
  where = parent.frame(), ...)
}
\arguments{
\item{id}{\code{\link{character}}.}

\item{where}{\code{\link{environment}}.}

\item{...}{Further arguments to be passed to subsequent functions/methods.}
}
\value{
\code{\link{logical}}. \code{TRUE}: successfully removed;
   \code{FALSE}: not removed because there was nothing to remove.
}
\description{
See generic: \code{\link[reactr]{removeFromRegistry}}
}
\examples{
\dontrun{

## NOTE //
## This function should typically only be called inside 'unsetReactive()'
## as it manages the internal registry!

## Start with a clean registry //
resetRegistry()

where <- new.env()
setReactiveS3(id = "x_1", value = 10, where = where)
setReactiveS3(id = "x_2", 
  value = function() .ref_1 <- get("x_1"),
  where = where
)

## Insepct registry before removal //
showRegistry()

removeFromRegistry(id = "x_1", where = where)
showRegistry()
removeFromRegistry(id = "x_2", where = where)
showRegistry()

## Sanity of actual cached values is not affected by this unless other values
## for `strict_get` are chosen
where$x_1
where$x_2

}
}
\author{
Janko Thyson \email{janko.thyson@rappster.de}
}
\references{
\url{http://github.com/Rappster/reactr}
}
\seealso{
\code{
   \link[reactr]{removeFromRegistry}
}
}

