% Generated by roxygen2 (4.0.2): do not edit by hand
\docType{methods}
\name{removeFromRegistry,character,missing-method}
\alias{removeFromRegistry,character,missing-method}
\alias{removeFromRegistry-character-missing-method}
\title{Remove From Registry (character-missing)}
\usage{
\S4method{removeFromRegistry}{character,missing}(id, where = parent.frame(),
  ...)
}
\arguments{
\item{id}{\code{\link{character}}.}

\item{where}{\code{\link{missing}}.}

\item{...}{Further arguments to be passed to subsequent functions/methods.}
}
\value{
See method
   \code{\link[reactr]{removeFromRegistry-character-environment-method}}.
}
\description{
See generic: \code{\link[reactr]{removeFromRegistry}}
}
\examples{
\dontrun{

## NOTE //
## This function should typically only be called inside 'unsetReactive()'
## as it manages the internal registry!

## Start with a clean registry //
resetRegistry()

where <- new.env()
setReactiveS3(id = id, value = 10, where = where)
setReactiveS3(id = id_2, 
  value = function() .ref_1 <- get("x_1", envir = where),
  where = where
)

## Insepct registry before removal //
ls(getRegistry())

removeFromRegistry(id = "x_1", where = where)
ls(getRegistry())
removeFromRegistry(id = "x_2", where = where)
ls(getRegistry())

## Sanity of actual cached values is not affected by this //
where$x_1
where$x_2

}
}
\author{
Janko Thyson \email{janko.thyson@rappster.de}
}
\references{
\url{http://github.com/Rappster/reactr}
}
\seealso{
\code{
   \link[reactr]{removeFromRegistry},
   \link[reactr]{removeFromRegistry-character-environment-method}
}
}

