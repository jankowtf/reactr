% Generated by roxygen2 (4.0.2): do not edit by hand
\name{rmReactive}
\alias{rmReactive}
\title{Remove Reactive Object (generic)}
\usage{
rmReactive(id, where = parent.frame(), ...)
}
\arguments{
\item{id}{\strong{Signature argument}.
Object containing path-like ID information.}

\item{where}{\strong{Signature argument}.
Object containing location information.}

\item{...}{Further arguments to be passed to subsequent functions/methods.}
}
\description{
Removes a reactive object from its environment. This implies that the
registry (see \code{\link[reactr]{getRegistry}}) is also updated
accordingly.
}
\details{
\strong{Note that tis is different from unsetting a reactive object
via \code{\link[reactr]{rmReactive}}}. It is equivalent to
\code{\link[base]{rm}} with a previous call to
\code{\link[reactr]{unsetReactive}}.
}
\note{
The main S4 method is
\code{\link[reactr]{rmReactive-character-environment-method}}.
}
\section{Implications with respect to observing variables}{


If other reactive variables have been observing the reactive variable that
has been removed, from this point on they will simply return the last value
that has been cached if when setting the object via
\code{\link[reactr]{setReactiveS3}} argument \code{strict} was \code{FALSE}.
In case it was \code{TRUE}, the function returns error condition
\code{BrokenReactiveBinding}.
}
\examples{
\dontrun{

## Start with fresh registry //
resetRegistry()

## Non-strict //
setReactiveS3(id = "x_1", value = 10)
setReactiveS3(id = "x_2", 
  value = function() {
    "object-ref: {id: x_1}"
    x_1 * 2
  }
)

rmReactive(id = "x_1")
exists("x_1", envir = environment(), inherits = FALSE)
x_2
## --> `x_2` not affected but only because `strict_get = 0`

## Strict: level 1 //
setReactiveS3(id = "x_1", value = 10)
setReactiveS3(id = "x_2", 
  value = function() {
    "object-ref: {id: x_1}"
    x_1 * 2
  },
  strict_get = 1
)
rmReactive(id = "x_1")
try(x_2)
## --> warning as referenced object `x_1` does not exist anymore

## Strict: level 2 //
setReactiveS3(id = "x_1", value = 10)
setReactiveS3(id = "x_2", 
  value = function() {
    "object-ref: {id: x_1}"
    x_1 * 2
  },
  strict_get = 2
)
rmReactive(id = "x_1")
try(x_2)
## --> error as referenced object `x_1` does not exist anymore

}
}
\author{
Janko Thyson \email{janko.thyson@rappster.de}
}
\references{
\url{http://github.com/Rappster/reactr}
}
\seealso{
\code{
  	\link[reactr]{rmReactive-character-environment-method}
}
}

