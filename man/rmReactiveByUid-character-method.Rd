% Generated by roxygen2 (4.0.2): do not edit by hand
\docType{methods}
\name{rmReactiveByUid,character-method}
\alias{rmReactiveByUid,character-method}
\alias{rmReactiveByUid-method_main}
\title{Remove Reactive Object (character)}
\usage{
\S4method{rmReactiveByUid}{character}(uid, ...)
}
\arguments{
\item{uid}{\code{\link{character}}.}

\item{...}{Further arguments to be passed to subsequent functions/methods.}
}
\value{
See method
   \code{\link[reactr]{rmReactiveByUid-character-method}}
}
\description{
See generic: \code{\link[reactr]{rmReactiveByUid}}
}
\examples{
\dontrun{

setReactiveS3(id = "x_1", value = 10)
isReactive("x_1")
setReactiveS3(id = "x_2", value = function() "object-ref: {id: x_1}")

unsetReactiveByUid(uid = computeObjectUid("x_1"))
isReactive("x_1")
## --> `x_1` is now a regular/non-reactive object again

## Actual values still identical //
x_1
identical(x_2, x_1)

## Implications for objects referencing `x_1` //
x_1 <- 20
x_1
x_2
## --> no reactive binding to `x_1` anymore

setReactiveS3(id = "x_2", value = function() "object-ref: {id: x_1}",
              strict_get = 1)
x_1 <- 10
x_2

}
}
\author{
Janko Thyson \email{janko.thyson@rappster.de}
}
\references{
\url{http://github.com/Rappster/reactr}
}
\seealso{
\code{
   Generic: \link[reactr]{rmReactiveByUid}
}
}

