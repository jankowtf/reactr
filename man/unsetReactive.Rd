% Generated by roxygen2 (4.0.2): do not edit by hand
\name{unsetReactive}
\alias{unsetReactive}
\title{Unset Reactive Object (generic)}
\usage{
unsetReactive(id, where = parent.frame(), ...)
}
\arguments{
\item{id}{\strong{Signature argument}.
Object containing path-like ID information.}

\item{where}{\strong{Signature argument}.
Object containing location information.}

\item{...}{Further arguments to be passed to subsequent functions/methods.}
}
\description{
Removes the reactive \strong{character} from an object, i.e. its
binding(s) to other objects and the ability for other objects to have
bindings to it. It is equivalent to transforming the object to one that
has been assigned via \code{\link[base]{assign}} or \code{\link[base]{<-}}
instead of \code{\link[reactr]{setReactiveS3}} and thus in turn
by \code{\link[base]{makeActiveBinding}}.

Note that it is \strong{not} equivalent to removing/deleting the object!
See \code{\link[reactr]{rmReactive}} for this purpose.
}
\note{
The main S4 method is
\code{\link[reactr]{unsetReactive-character-environment-method}}.
}
\section{Implications with respect to observing variables}{


If other reactive variables have been observing the reactive variable that
has been unset, from this point on they will simply return the last value
that has been cached. \strong{So there is no actual reactive binding anymore}.
}
\examples{
\dontrun{

##------------------------------------------------------------------------------  
## Non-strict get behavior //  
##------------------------------------------------------------------------------

## Set example reactive objects //  
setReactiveS3(id = "x_1", value = 10)
setReactiveS3(id = "x_2", value = function() "object-ref: {id: x_1}")

## Unset //
## --> transforms objects into non-reactive/regular objects again
isReactive("x_1")
unsetReactive("x_1")
isReactive("x_1")

## Inspect //
x_1
identical(x_2, x_1)
x_1 <- 20
x_1
x_2
## --> no reactive relationship to 'x_1' anymore; last cached value returned
isReactive("x_2")

## Reset referenced object again //
setReactiveS3(id = "x_1", value = 50)
x_1
identical(x_2, x_1)
## --> reactive relationship re-established again

## Clean up //
rmReactive("x_1")
rmReactive("x_2")

##------------------------------------------------------------------------------  
## Strict get behavior level 1 //  
##------------------------------------------------------------------------------

setReactiveS3(id = "x_1", value = 10)
setReactiveS3(id = "x_2", value = function() "object-ref: {id: x_1}",
              strict_get = 1)
unsetReactive("x_1")

try(x_2)
## --> warning and NULL

setReactiveS3(id = "x_1", value = 50)
x_2
## --> reactive relationship restored

## Clean up //
rmReactive("x_1")
rmReactive("x_2")

##------------------------------------------------------------------------------  
## Strict get behavior level 2 //  
##------------------------------------------------------------------------------

setReactiveS3(id = "x_1", value = 10)
setReactiveS3(id = "x_2", value = function() "object-ref: {id: x_1}",
              strict_get = 2)

unsetReactive("x_1")
try(x_2)
## --> error

setReactiveS3(id = "x_1", value = 50)
x_2
## --> reactive relationship restored

## Clean up //
rmReactive("x_1")
rmReactive("x_2")

}
}
\author{
Janko Thyson \email{janko.thyson@rappster.de}
}
\references{
\url{http://github.com/Rappster/reactr}
}
\seealso{
\code{
  	\link[reactr]{unsetReactive-character-environment-method},
   \link[reactr]{unsetReactiveByUid}
}
}

