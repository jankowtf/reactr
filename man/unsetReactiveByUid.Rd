% Generated by roxygen2 (4.0.2): do not edit by hand
\name{unsetReactiveByUid}
\alias{unsetReactiveByUid}
\title{Unset Reactive Object}
\usage{
unsetReactiveByUid(uid, ...)
}
\arguments{
\item{uid}{\strong{Signature argument}.
Object containing UID information.}

\item{...}{Further arguments to be passed to subsequent functions/methods.}
}
\description{
Removes the reactive \strong{character} from an object, i.e. its
binding(s) to other objects and the ability for other objects to have
bindings to it. It is equivalent to transforming the object to one that
has been assigned via \code{\link[base]{assign}} or \code{\link[base]{<-}}
instead of \code{\link[reactr]{setReactiveS3}} and thus in turn
by \code{\link[base]{makeActiveBinding}}.

Note that it is \strong{not} equivalent to removing/deleting the object!
See \code{\link[reactr]{removeReactive}} for this purpose.
}
\note{
The main S4 method is
\code{\link[reactr]{unsetReactiveByUid-character-method}}.
}
\section{Implications with respect objects depending on this object}{


If other reactive objects have been relying on this reactive variable,
from this point on they will simply return the last value
that has been cached. \strong{So there is no actual reactive binding anymore}.
}
\examples{
\dontrun{

## Set example reactive objects //  
setReactiveS3(id = "x_1", value = 10)
setReactiveS3(id = "x_2", value = function() "object-ref: {id: x_1}")
x_1 <- 50
x_2
regref_1 <- getFromRegistry("x_1")
uid_1 <- regref_1$uid
regref_1$checksum
# regref_1$invalid <- TRUE
regref_2 <- getFromRegistry("x_2")
uid_2 <- regref_2$uid
regref_2$references[[uid_1]]$invalid
regref_2$references[[uid_1]]$checksum
x_2

## Unset //
## --> transforms objects into non-reactive/regular objects again
unsetReactiveByUid(uid = getObjectUid("x_1"))

## Inspect //
x_1
identical(x_2, x_1)
x_1 <- 20
x_1
x_2
## --> no reactive relationship to 'x_1' anymore; last cached value returned
isReactive("x_1")
isReactive("x_2")

## Reset again //
setReactiveS3(id = "x_1", value = 10)
x_1
x_2


ls(regref_2$hash)

regref_1$checksum
regref_2$checksums_ref[[uid_1]]
ls(regref_2$references)
(regref_2$references[[uid_1]])
regref_2$references[[uid_1]]$checksum

env_1 <- new.env()
env_2 <- new.env()
env_2$env_1 <- env_1
rm(env_1)

## --> cached value still at '10' --> reactivity is revealed only after 
## changing 'x_1'
x_1 <- 30
x_1
x_2

## Clean up //
ls(getRegistry())
resetRegistry()
rm(x_2)
rm(x_1)

}
}
\author{
Janko Thyson \email{janko.thyson@rappster.de}
}
\references{
\url{http://github.com/Rappster/reactr}
}
\seealso{
\code{
  	\link[reactr]{unsetReactiveByUid-character-method}
}
}

